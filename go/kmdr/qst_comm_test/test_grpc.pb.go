// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: test.proto

package qst_comm_test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// InteractClient is the client API for Interact service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InteractClient interface {
	InputChange(ctx context.Context, in *Input, opts ...grpc.CallOption) (*DisplayList, error)
	SelectChange(ctx context.Context, in *Select, opts ...grpc.CallOption) (*DisplayList, error)
}

type interactClient struct {
	cc grpc.ClientConnInterface
}

func NewInteractClient(cc grpc.ClientConnInterface) InteractClient {
	return &interactClient{cc}
}

func (c *interactClient) InputChange(ctx context.Context, in *Input, opts ...grpc.CallOption) (*DisplayList, error) {
	out := new(DisplayList)
	err := c.cc.Invoke(ctx, "/qst_comm_test.Interact/InputChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interactClient) SelectChange(ctx context.Context, in *Select, opts ...grpc.CallOption) (*DisplayList, error) {
	out := new(DisplayList)
	err := c.cc.Invoke(ctx, "/qst_comm_test.Interact/SelectChange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InteractServer is the server API for Interact service.
// All implementations must embed UnimplementedInteractServer
// for forward compatibility
type InteractServer interface {
	InputChange(context.Context, *Input) (*DisplayList, error)
	SelectChange(context.Context, *Select) (*DisplayList, error)
	mustEmbedUnimplementedInteractServer()
}

// UnimplementedInteractServer must be embedded to have forward compatible implementations.
type UnimplementedInteractServer struct {
}

func (UnimplementedInteractServer) InputChange(context.Context, *Input) (*DisplayList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InputChange not implemented")
}
func (UnimplementedInteractServer) SelectChange(context.Context, *Select) (*DisplayList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectChange not implemented")
}
func (UnimplementedInteractServer) mustEmbedUnimplementedInteractServer() {}

// UnsafeInteractServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InteractServer will
// result in compilation errors.
type UnsafeInteractServer interface {
	mustEmbedUnimplementedInteractServer()
}

func RegisterInteractServer(s grpc.ServiceRegistrar, srv InteractServer) {
	s.RegisterService(&Interact_ServiceDesc, srv)
}

func _Interact_InputChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServer).InputChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qst_comm_test.Interact/InputChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServer).InputChange(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

func _Interact_SelectChange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Select)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InteractServer).SelectChange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qst_comm_test.Interact/SelectChange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InteractServer).SelectChange(ctx, req.(*Select))
	}
	return interceptor(ctx, in, info, handler)
}

// Interact_ServiceDesc is the grpc.ServiceDesc for Interact service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Interact_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qst_comm_test.Interact",
	HandlerType: (*InteractServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InputChange",
			Handler:    _Interact_InputChange_Handler,
		},
		{
			MethodName: "SelectChange",
			Handler:    _Interact_SelectChange_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
