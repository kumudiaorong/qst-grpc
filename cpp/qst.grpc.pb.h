// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: qst.proto
#ifndef GRPC_qst_2eproto__INCLUDED
#define GRPC_qst_2eproto__INCLUDED

#include "qst.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace qst {

class Interact final {
 public:
  static constexpr char const* service_full_name() {
    return "qst.Interact";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // sample rpc
    virtual ::grpc::Status Query(::grpc::ClientContext* context, const ::qst::Input& request, ::qst::AppInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qst::AppInfo>> AsyncQuery(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qst::AppInfo>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qst::AppInfo>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qst::AppInfo>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::qst::AppInfo>> ListApp(::grpc::ClientContext* context, const ::qst::Input& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::qst::AppInfo>>(ListAppRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::qst::AppInfo>> AsyncListApp(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::qst::AppInfo>>(AsyncListAppRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::qst::AppInfo>> PrepareAsyncListApp(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::qst::AppInfo>>(PrepareAsyncListAppRaw(context, request, cq));
    }
    virtual ::grpc::Status RunApp(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::qst::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qst::Empty>> AsyncRunApp(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qst::Empty>>(AsyncRunAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qst::Empty>> PrepareAsyncRunApp(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::qst::Empty>>(PrepareAsyncRunAppRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // sample rpc
      virtual void Query(::grpc::ClientContext* context, const ::qst::Input* request, ::qst::AppInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Query(::grpc::ClientContext* context, const ::qst::Input* request, ::qst::AppInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListApp(::grpc::ClientContext* context, const ::qst::Input* request, ::grpc::ClientReadReactor< ::qst::AppInfo>* reactor) = 0;
      virtual void RunApp(::grpc::ClientContext* context, const ::qst::AppInfo* request, ::qst::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RunApp(::grpc::ClientContext* context, const ::qst::AppInfo* request, ::qst::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qst::AppInfo>* AsyncQueryRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qst::AppInfo>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::qst::AppInfo>* ListAppRaw(::grpc::ClientContext* context, const ::qst::Input& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::qst::AppInfo>* AsyncListAppRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::qst::AppInfo>* PrepareAsyncListAppRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qst::Empty>* AsyncRunAppRaw(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::qst::Empty>* PrepareAsyncRunAppRaw(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Query(::grpc::ClientContext* context, const ::qst::Input& request, ::qst::AppInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qst::AppInfo>> AsyncQuery(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qst::AppInfo>>(AsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qst::AppInfo>> PrepareAsyncQuery(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qst::AppInfo>>(PrepareAsyncQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::qst::AppInfo>> ListApp(::grpc::ClientContext* context, const ::qst::Input& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::qst::AppInfo>>(ListAppRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::qst::AppInfo>> AsyncListApp(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::qst::AppInfo>>(AsyncListAppRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::qst::AppInfo>> PrepareAsyncListApp(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::qst::AppInfo>>(PrepareAsyncListAppRaw(context, request, cq));
    }
    ::grpc::Status RunApp(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::qst::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qst::Empty>> AsyncRunApp(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qst::Empty>>(AsyncRunAppRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qst::Empty>> PrepareAsyncRunApp(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::qst::Empty>>(PrepareAsyncRunAppRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Query(::grpc::ClientContext* context, const ::qst::Input* request, ::qst::AppInfo* response, std::function<void(::grpc::Status)>) override;
      void Query(::grpc::ClientContext* context, const ::qst::Input* request, ::qst::AppInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListApp(::grpc::ClientContext* context, const ::qst::Input* request, ::grpc::ClientReadReactor< ::qst::AppInfo>* reactor) override;
      void RunApp(::grpc::ClientContext* context, const ::qst::AppInfo* request, ::qst::Empty* response, std::function<void(::grpc::Status)>) override;
      void RunApp(::grpc::ClientContext* context, const ::qst::AppInfo* request, ::qst::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::qst::AppInfo>* AsyncQueryRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qst::AppInfo>* PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::qst::AppInfo>* ListAppRaw(::grpc::ClientContext* context, const ::qst::Input& request) override;
    ::grpc::ClientAsyncReader< ::qst::AppInfo>* AsyncListAppRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::qst::AppInfo>* PrepareAsyncListAppRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qst::Empty>* AsyncRunAppRaw(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::qst::Empty>* PrepareAsyncRunAppRaw(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Query_;
    const ::grpc::internal::RpcMethod rpcmethod_ListApp_;
    const ::grpc::internal::RpcMethod rpcmethod_RunApp_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // sample rpc
    virtual ::grpc::Status Query(::grpc::ServerContext* context, const ::qst::Input* request, ::qst::AppInfo* response);
    virtual ::grpc::Status ListApp(::grpc::ServerContext* context, const ::qst::Input* request, ::grpc::ServerWriter< ::qst::AppInfo>* writer);
    virtual ::grpc::Status RunApp(::grpc::ServerContext* context, const ::qst::AppInfo* request, ::qst::Empty* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Query() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::qst::AppInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::qst::Input* request, ::grpc::ServerAsyncResponseWriter< ::qst::AppInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListApp() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApp(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::grpc::ServerWriter< ::qst::AppInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListApp(::grpc::ServerContext* context, ::qst::Input* request, ::grpc::ServerAsyncWriter< ::qst::AppInfo>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RunApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RunApp() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_RunApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunApp(::grpc::ServerContext* /*context*/, const ::qst::AppInfo* /*request*/, ::qst::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunApp(::grpc::ServerContext* context, ::qst::AppInfo* request, ::grpc::ServerAsyncResponseWriter< ::qst::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Query<WithAsyncMethod_ListApp<WithAsyncMethod_RunApp<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Query() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::qst::Input, ::qst::AppInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::qst::Input* request, ::qst::AppInfo* response) { return this->Query(context, request, response); }));}
    void SetMessageAllocatorFor_Query(
        ::grpc::MessageAllocator< ::qst::Input, ::qst::AppInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::qst::Input, ::qst::AppInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::qst::AppInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::qst::Input* /*request*/, ::qst::AppInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListApp() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::qst::Input, ::qst::AppInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::qst::Input* request) { return this->ListApp(context, request); }));
    }
    ~WithCallbackMethod_ListApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApp(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::grpc::ServerWriter< ::qst::AppInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::qst::AppInfo>* ListApp(
      ::grpc::CallbackServerContext* /*context*/, const ::qst::Input* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RunApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RunApp() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::qst::AppInfo, ::qst::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::qst::AppInfo* request, ::qst::Empty* response) { return this->RunApp(context, request, response); }));}
    void SetMessageAllocatorFor_RunApp(
        ::grpc::MessageAllocator< ::qst::AppInfo, ::qst::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::qst::AppInfo, ::qst::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RunApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunApp(::grpc::ServerContext* /*context*/, const ::qst::AppInfo* /*request*/, ::qst::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunApp(
      ::grpc::CallbackServerContext* /*context*/, const ::qst::AppInfo* /*request*/, ::qst::Empty* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Query<WithCallbackMethod_ListApp<WithCallbackMethod_RunApp<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Query() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::qst::AppInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListApp() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApp(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::grpc::ServerWriter< ::qst::AppInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RunApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RunApp() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_RunApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunApp(::grpc::ServerContext* /*context*/, const ::qst::AppInfo* /*request*/, ::qst::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Query() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::qst::AppInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListApp() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApp(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::grpc::ServerWriter< ::qst::AppInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListApp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RunApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RunApp() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_RunApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunApp(::grpc::ServerContext* /*context*/, const ::qst::AppInfo* /*request*/, ::qst::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRunApp(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Query() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Query(context, request, response); }));
    }
    ~WithRawCallbackMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::qst::AppInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Query(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListApp() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ListApp(context, request); }));
    }
    ~WithRawCallbackMethod_ListApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListApp(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::grpc::ServerWriter< ::qst::AppInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ListApp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RunApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RunApp() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RunApp(context, request, response); }));
    }
    ~WithRawCallbackMethod_RunApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RunApp(::grpc::ServerContext* /*context*/, const ::qst::AppInfo* /*request*/, ::qst::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RunApp(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Query : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Query() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::qst::Input, ::qst::AppInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::qst::Input, ::qst::AppInfo>* streamer) {
                       return this->StreamedQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Query() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Query(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::qst::AppInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qst::Input,::qst::AppInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RunApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RunApp() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::qst::AppInfo, ::qst::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::qst::AppInfo, ::qst::Empty>* streamer) {
                       return this->StreamedRunApp(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RunApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RunApp(::grpc::ServerContext* /*context*/, const ::qst::AppInfo* /*request*/, ::qst::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRunApp(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::qst::AppInfo,::qst::Empty>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Query<WithStreamedUnaryMethod_RunApp<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ListApp : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ListApp() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::qst::Input, ::qst::AppInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::qst::Input, ::qst::AppInfo>* streamer) {
                       return this->StreamedListApp(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ListApp() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListApp(::grpc::ServerContext* /*context*/, const ::qst::Input* /*request*/, ::grpc::ServerWriter< ::qst::AppInfo>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedListApp(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::qst::Input,::qst::AppInfo>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ListApp<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Query<WithSplitStreamingMethod_ListApp<WithStreamedUnaryMethod_RunApp<Service > > > StreamedService;
};

}  // namespace qst


#endif  // GRPC_qst_2eproto__INCLUDED
