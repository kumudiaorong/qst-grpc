// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: qst.proto

#include "qst.pb.h"
#include "qst.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace qst {

static const char* Interact_method_names[] = {
  "/qst.Interact/Query",
  "/qst.Interact/ListApp",
  "/qst.Interact/RunApp",
};

std::unique_ptr< Interact::Stub> Interact::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Interact::Stub> stub(new Interact::Stub(channel, options));
  return stub;
}

Interact::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Query_(Interact_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListApp_(Interact_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RunApp_(Interact_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Interact::Stub::Query(::grpc::ClientContext* context, const ::qst::Input& request, ::qst::AppInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::qst::Input, ::qst::AppInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Query_, context, request, response);
}

void Interact::Stub::async::Query(::grpc::ClientContext* context, const ::qst::Input* request, ::qst::AppInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::qst::Input, ::qst::AppInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, std::move(f));
}

void Interact::Stub::async::Query(::grpc::ClientContext* context, const ::qst::Input* request, ::qst::AppInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Query_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::qst::AppInfo>* Interact::Stub::PrepareAsyncQueryRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::qst::AppInfo, ::qst::Input, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Query_, context, request);
}

::grpc::ClientAsyncResponseReader< ::qst::AppInfo>* Interact::Stub::AsyncQueryRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::qst::AppInfo>* Interact::Stub::ListAppRaw(::grpc::ClientContext* context, const ::qst::Input& request) {
  return ::grpc::internal::ClientReaderFactory< ::qst::AppInfo>::Create(channel_.get(), rpcmethod_ListApp_, context, request);
}

void Interact::Stub::async::ListApp(::grpc::ClientContext* context, const ::qst::Input* request, ::grpc::ClientReadReactor< ::qst::AppInfo>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::qst::AppInfo>::Create(stub_->channel_.get(), stub_->rpcmethod_ListApp_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::qst::AppInfo>* Interact::Stub::AsyncListAppRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::qst::AppInfo>::Create(channel_.get(), cq, rpcmethod_ListApp_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::qst::AppInfo>* Interact::Stub::PrepareAsyncListAppRaw(::grpc::ClientContext* context, const ::qst::Input& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::qst::AppInfo>::Create(channel_.get(), cq, rpcmethod_ListApp_, context, request, false, nullptr);
}

::grpc::Status Interact::Stub::RunApp(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::qst::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::qst::AppInfo, ::qst::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RunApp_, context, request, response);
}

void Interact::Stub::async::RunApp(::grpc::ClientContext* context, const ::qst::AppInfo* request, ::qst::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::qst::AppInfo, ::qst::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunApp_, context, request, response, std::move(f));
}

void Interact::Stub::async::RunApp(::grpc::ClientContext* context, const ::qst::AppInfo* request, ::qst::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RunApp_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::qst::Empty>* Interact::Stub::PrepareAsyncRunAppRaw(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::qst::Empty, ::qst::AppInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RunApp_, context, request);
}

::grpc::ClientAsyncResponseReader< ::qst::Empty>* Interact::Stub::AsyncRunAppRaw(::grpc::ClientContext* context, const ::qst::AppInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRunAppRaw(context, request, cq);
  result->StartCall();
  return result;
}

Interact::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interact_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interact::Service, ::qst::Input, ::qst::AppInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interact::Service* service,
             ::grpc::ServerContext* ctx,
             const ::qst::Input* req,
             ::qst::AppInfo* resp) {
               return service->Query(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interact_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Interact::Service, ::qst::Input, ::qst::AppInfo>(
          [](Interact::Service* service,
             ::grpc::ServerContext* ctx,
             const ::qst::Input* req,
             ::grpc::ServerWriter<::qst::AppInfo>* writer) {
               return service->ListApp(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Interact_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Interact::Service, ::qst::AppInfo, ::qst::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Interact::Service* service,
             ::grpc::ServerContext* ctx,
             const ::qst::AppInfo* req,
             ::qst::Empty* resp) {
               return service->RunApp(ctx, req, resp);
             }, this)));
}

Interact::Service::~Service() {
}

::grpc::Status Interact::Service::Query(::grpc::ServerContext* context, const ::qst::Input* request, ::qst::AppInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interact::Service::ListApp(::grpc::ServerContext* context, const ::qst::Input* request, ::grpc::ServerWriter< ::qst::AppInfo>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Interact::Service::RunApp(::grpc::ServerContext* context, const ::qst::AppInfo* request, ::qst::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace qst

